#Joy Burkart
#Assignment 7
#This program will prompt the user for a prefered width of characters and then
#ask for a string of words to draw in turtle


from turtle import *

import math

#opening the file
file = open('fourteenseg.py', 'w')



#writing to the file, including all comments, so I suggest you look in that file for my comments on the individual functions, once it's written to the disk
file.write("#Fourteen Segment Functions\n")
file.write("from turtle import *\n")
file.write("import math\n")
file.write("#Functions of Alphabet:\n")
file.write("def A(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("\n")
file.write("def B(w):\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    stroke4(w)\n")
file.write("    stroke8(w)\n")
file.write("    midright(w)\n")
file.write("\n")
file.write("def C(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def D(w):\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    stroke4(w)\n")
file.write("    stroke8(w)\n")
file.write("\n")
file.write("def E(w):\n")
file.write("    topstroke(w)\n")
file.write("    leftstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    midleft(w)\n")
file.write("\n")
file.write("def F(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    midleft(w)\n")
file.write("\n")
file.write("def G(w):\n")
file.write("    topstroke(w)\n")
file.write("    leftstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    lowright(w)\n")
file.write("    midright(w)\n")
file.write("\n")
file.write("def H(w):\n")
file.write("    leftstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("\n")
file.write("def I(w):\n")
file.write("    topstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    stroke4(w)\n")
file.write("    stroke8(w)\n")
file.write("\n")
file.write("def J(w):\n")
file.write("    bottomstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    lowleft(w)\n")
file.write("\n")
file.write("def K(w):\n")
file.write("    leftstroke(w)\n")
file.write("    midleft(w)\n")
file.write("    stroke5(w)\n")
file.write("    stroke9(w)\n")
file.write("\n")
file.write("def L(w):\n")
file.write("    leftstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def M(w):\n")
file.write("    leftstroke(w)\n")
file.write("    stroke3(w)\n")
file.write("    stroke5(w)\n")
file.write("    rightstroke(w)\n")
file.write("\n")
file.write("def N(w):\n")
file.write("    leftstroke(w)\n")
file.write("    stroke3(w)\n")
file.write("    stroke9(w)\n")
file.write("    rightstroke(w)\n")
file.write("\n")
file.write("def O(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def P(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    upright(w)\n")
file.write("\n")
file.write("def Q(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    stroke9(w)\n")
file.write("\n")
file.write("def R(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    stroke9(w)\n")
file.write("    upright(w)\n")
file.write("\n")
file.write("def S(w):\n")
file.write("    topstroke(w)\n")
file.write("    stroke3(w)\n")
file.write("    midright(w)\n")
file.write("    lowright(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def T(w):\n")
file.write("    topstroke(w)\n")
file.write("    stroke4(w)\n")
file.write("    stroke8(w)\n")
file.write("\n")
file.write("def U(w):\n")
file.write("    leftstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def V(w):\n")
file.write("    leftstroke(w)\n")
file.write("    stroke7(w)\n")
file.write("    stroke5(w)\n")
file.write("\n")
file.write("def W(w):\n")
file.write("    leftstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    stroke7(w)\n")
file.write("    stroke9(w)\n")
file.write("\n")
file.write("def X(w):\n")
file.write("    stroke3(w)\n")
file.write("    stroke5(w)\n")
file.write("    stroke7(w)\n")
file.write("    stroke9(w)\n")
file.write("\n")
file.write("def Y(w):\n")
file.write("    stroke3(w)\n")
file.write("    stroke5(w)\n")
file.write("    stroke8(w)\n")
file.write("\n")
file.write("def Z(w):\n")
file.write("    topstroke(w)\n")
file.write("    stroke5(w)\n")
file.write("    stroke7(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def one(w):\n")
file.write("    stroke5(w)\n")
file.write("    rightstroke(w)\n")
file.write("\n")
file.write("def zero(w):\n")
file.write("    leftstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def two(w):\n")
file.write("    topstroke(w)\n")
file.write("    upright(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    lowleft(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def three(w):\n")
file.write("    topstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    midright(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def four(w):\n")
file.write("    upleft(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    rightstroke(w)\n")
file.write("\n")
file.write("def five(w):\n")
file.write("    topstroke(w)\n")
file.write("    upleft(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    lowright(w)\n")
file.write("    bottomstroke(w)\n")
file.write("\n")
file.write("def six(w):\n")
file.write("    topstroke(w)\n")
file.write("    leftstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    lowright(w)\n")
file.write("    midright(w)\n")
file.write("    midleft(w)\n")
file.write("\n")
file.write("def seven(w):\n")
file.write("    topstroke(w)\n")
file.write("    stroke5(w)\n")
file.write("    stroke8(w)\n")
file.write("\n")
file.write("def eight(w):\n")
file.write("    topstroke(w)\n")
file.write("    leftstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    bottomstroke(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("\n")
file.write("def nine(w):\n")
file.write("    topstroke(w)\n")
file.write("    upleft(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    rightstroke(w)\n")
file.write("\n")
file.write("#basic stroke for top or bottom\n")
file.write("def stroke1 (w):\n")
file.write("    begin_fill()\n")
file.write("    lt(45)\n")
file.write("    fd(5) #five is the length of the diagonal on each of the points, this is constant throughout, no matter what size a user enters\n")
file.write("    rt(45)\n")
file.write("    fd(w)\n")
file.write("    rt(45)\n")
file.write("    fd(5)\n")
file.write("    rt(90)\n")
file.write("    fd(5)\n")
file.write("    rt(45)\n")
file.write("    fd(w)\n")
file.write("    rt(45)\n")
file.write("    fd(5)\n")
file.write("    rt(135) #facing right (normal orientation)\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("#function for top stroke of a character\n")
file.write("def topstroke(w):\n")
file.write("    #all my functions start from roughly the lower left, as suggested\n")
file.write("    #so first i have to get myself out of that corner and where I need to go\n")
file.write("    penup()\n")
file.write("    lt(90)\n")
file.write("    fd(w+28) #value determined roughly by slant space (by which I mean, the points on the ends of the characters take up space, obviously, but that space will be uniform because I've made it that way. So through trial and error I've come up with numbers that compensate for that space and allow 'w' to act as a constant variable for all widths possible to enter, though they don't necessarily look like they make any sense)\n")
file.write("    rt(90)\n")
file.write("    fd(5) #also determined by slant space, compensates for the far left area needed to write any left side strokes\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #actual stroke\n")
file.write("    stroke1(w)\n")
file.write("\n")
file.write("    #moving back to the corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd(w+28) #value determined roughly by slant space\n")
file.write("    lt(90)\n")
file.write("    backward(5)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#function for bottom stroke of a character\n")
file.write("def bottomstroke(w):\n")
file.write("    #moving out of corner\n")
file.write("    penup()\n")
file.write("    fd(5) #compensating for strokes on sides\n")
file.write("    lt(90)\n")
file.write("    fd(5)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #actual stroke\n")
file.write("    stroke1(w)\n")
file.write("\n")
file.write("    #going back to the corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    forward(5)\n")
file.write("    lt(90)\n")
file.write("    backward(5)\n")
file.write("\n")
file.write("#basic stroke for sides\n")
file.write("def stroke2(w):\n")
file.write("    begin_fill()\n")
file.write("    rt(45)\n")
file.write("    fd(5)\n")
file.write("    rt(45)\n")
file.write("    fd(w/2) #half the width (arbitrarily chosen, i didn't think it mattered)\n")
file.write("    rt(45)\n")
file.write("    fd(5)\n")
file.write("    rt(90)\n")
file.write("    fd(5)\n")
file.write("    rt(45)\n")
file.write("    fd(w/2)\n")
file.write("    rt(45)\n")
file.write("    fd(5)\n")
file.write("    rt(45)\n")
file.write("\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("#whole right side\n")
file.write("def upright(w):\n")
file.write("    #getting out of corner\n")
file.write("    penup()\n")
file.write("    fd(w+15)\n")
file.write("    lt(90)\n")
file.write("    fd(w+25)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #stroke itself\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #back to corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd(((w/2)+12)*2)\n")
file.write("    lt(90)\n")
file.write("    backward(w+15)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#whole right side\n")
file.write("def rightstroke(w):\n")
file.write("    #getting out of corner\n")
file.write("    penup()\n")
file.write("    fd(w+15) #from the (rough) estimation of the space generated by the slants of the characters\n")
file.write("    lt(90)\n")
file.write("    fd(w+25) #also a rough estimation of the space needed to move\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #stroke itself\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #prepping for next stroke\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+12) #please assume any random numbers you see are just me compensating for the points\n")
file.write("    lt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #second stroke\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #back to corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+13)\n")
file.write("    lt(90)\n")
file.write("    backward(w+15)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#whole left side\n")
file.write("def leftstroke(w):\n")
file.write("    #getting out of corner\n")
file.write("    penup()\n")
file.write("    fd(2)\n")
file.write("    lt(90)\n")
file.write("    fd(w+25)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #stroke itself\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #prep for next stroke\n")         
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+12)\n")
file.write("    lt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #second stroke\n")          
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #going back to corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+13)\n")
file.write("    lt(90)\n")
file.write("    backward(2)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#upper left stroke\n")
file.write("def upleft(w):\n")
file.write("    #getting out of corner\n")
file.write("    penup()\n")
file.write("    fd(2)\n")
file.write("    lt(90)\n")
file.write("    fd(w+25)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #stroke itself\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #back to corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd(w+25)\n")
file.write("    lt(90)\n")
file.write("    backward(2)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("def lowright(w):\n")
file.write("    #getting out of corner\n")
file.write("    penup()\n")
file.write("    fd(w+15) #from the (rough) estimation of the space generated by the slants of the characters\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)+12) #also a rough estimation of the space needed to move\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #stroke itself\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #back to corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+13)\n")
file.write("    lt(90)\n")
file.write("    backward(w+15)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#lower left side\n")
file.write("def lowleft(w):\n")
file.write("    #getting out of corner\n")
file.write("    penup()\n")
file.write("    fd(2)\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)+12)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #stroke\n")
file.write("    stroke2(w)\n")
file.write("\n")
file.write("    #going back to corner\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+13)\n")
file.write("    lt(90)\n")
file.write("    backward(2)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#lower middle stroke\n")
file.write("def stroke8(w):\n")
file.write("    #moving from corner\n")
file.write("    penup()\n")
file.write("    fd((w/2)+3)\n")
file.write("    lt(90)\n")
file.write("    fd(12)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #actual middle line\n")
file.write("    begin_fill()\n")
file.write("    fd(10)\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)-3)\n")
file.write("    lt(45)\n")
file.write("    fd(7)\n")
file.write("    lt(90)\n")
file.write("    fd(7)\n")
file.write("    lt(45)\n")
file.write("    fd((w/2)-3)\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("    #back to that corner\n")
file.write("    penup()\n")
file.write("    fd(12)\n")
file.write("    rt(90)\n")
file.write("    fd((w/2+3))\n")
file.write("    rt(180)\n")
file.write("\n")
file.write("#middle top stroke\n")
file.write("def stroke4(w):\n")
file.write("    #moving out of corner\n")
file.write("    penup()\n")
file.write("    lt(90)\n")
file.write("    fd(w+21)\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+3)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    #actual stroke\n")
file.write("    begin_fill()\n")
file.write("    fd((w/2)-3)\n")
file.write("    lt(45)\n")
file.write("    fd(7)\n")
file.write("    lt(90)\n")
file.write("    fd(7)\n")
file.write("    lt(45)\n")
file.write("    fd((w/2)-3)\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("    #back to corner\n")
file.write("    penup()\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)+13)\n")
file.write("    lt(90)\n")
file.write("    fd(w+21)\n")
file.write("    lt(90)\n")
file.write("\n")
file.write("#bisecting on the horozontal stroke layout\n")
file.write("def stroke6(w):\n")
file.write("    begin_fill()\n")
file.write("    lt(45)\n")
file.write("    fd(4)\n")
file.write("    rt(45)\n")
file.write("    fd((w/2)-6)\n")
file.write("    rt(45)\n")
file.write("    fd(4)\n")
file.write("    rt(90)\n")
file.write("    fd(4)\n")
file.write("    rt(45)\n")
file.write("    fd((w/2)-6)\n")
file.write("    rt(45)\n")
file.write("    fd(5)\n")
file.write("    rt(135)\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("#function for middle left stroke\n")
file.write("def midleft(w):\n")
file.write("    penup()\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)+16)\n")
file.write("    rt(90)\n")
file.write("    fd(5)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    stroke6(w)\n")
file.write("\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+16)\n")
file.write("    lt(90)\n")
file.write("    backward(5)\n")
file.write("\n")
file.write("#function for central right stroke\n")
file.write("def midright(w):\n")
file.write("    penup()\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)+15)\n")
file.write("    rt(90)\n")
file.write("    fd((w/2)+12)\n")
file.write("\n")
file.write("    stroke6(w)\n")
file.write("\n")
file.write("    penup()\n")
file.write("    lt(180)\n")
file.write("    fd((w/2)+12)\n")
file.write("    lt(90)\n")
file.write("    fd((w/2)+15)\n")
file.write("    lt(90)\n")
file.write("\n")
file.write("#hereafter lay diagonals, that all sort of overlap in the middle (or don't, depending on how big you go) because to be honest I gave up and they're still diagonals, leave me alone\n")
file.write("#upper left diagonal\n")
file.write("def stroke3(w):\n")
file.write("    penup()\n")
file.write("    fd(10)\n")
file.write("    lt(90)\n")
file.write("    fd(w+20)\n")
file.write("    rt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    begin_fill()\n")
file.write("\n")
file.write("    fd(3)\n")
file.write("    rt(45)\n")
file.write("    h = math.sqrt(((w/4)**2)+((w/3)**2))\n")
file.write("    fd(h) #not a perfect formula to get the diagonal, but it's what I've got. I was getting at the whole a^2+b^2=c^2 bit.\n")
file.write("    rt(45)\n")
file.write("    fd(7)\n")
file.write("    rt(90)\n")
file.write("    fd(3)\n")
file.write("    rt(45)\n")
file.write("    fd(h)\n")
file.write("    rt(45)\n")
file.write("    fd(7)\n")
file.write("\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    backward(10)\n")
file.write("    rt(90)\n")
file.write("    fd(w+20)\n")
file.write("    lt(90)\n")
file.write("\n")
file.write("#upper right diagonal\n")
file.write("def stroke5(w):\n")
file.write("    penup()\n")
file.write("    fd(w+10) #this is a good place to prove I knew what the heck I was doing when I entered all these random numbers and set my slants to a constant value: if you look at how far foward I move the turtle to start the other upper diagonal, you'll see it's moved 10 steps. these diagonals start 10 steps in, and are seperated by the width given by the user, which is the length of the straight parts of the strokes. I hope that proves I'm actually doing math for these and not just picking what's cute.\n") 
file.write("    lt(90)\n")
file.write("    fd(w+20)\n")
file.write("    lt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    begin_fill()\n")
file.write("\n")
file.write("    fd(3)\n")
file.write("    lt(45)\n")
file.write("    h = math.sqrt(((w/4)**2)+((w/3)**2))\n")
file.write("    fd(h)\n")
file.write("    lt(45)\n")
file.write("    fd(7)\n")
file.write("    lt(90)\n")
file.write("    fd(3)\n")
file.write("    lt(45)\n")
file.write("    fd(h)\n")
file.write("    lt(45)\n")
file.write("    fd(7)\n")
file.write("\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("    penup()\n")
file.write("    lt(90)\n")
file.write("    fd(w+10)\n")
file.write("    lt(90)\n")
file.write("    fd(w+20)\n")
file.write("    lt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#lower left diagonal\n")
file.write("def stroke7(w):\n")
file.write("    penup()\n")
file.write("    fd(10)\n")
file.write("    lt(90)\n")
file.write("    fd(10)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    begin_fill()\n")
file.write("\n")
file.write("    fd(7)\n")
file.write("    rt(45)\n")
file.write("    h = math.sqrt(((w/4)**2)+((w/3)**2))\n")
file.write("    fd(h)\n")
file.write("    rt(45)\n")
file.write("    fd(3)\n")
file.write("    rt(90)\n")
file.write("    fd(7)\n")
file.write("    rt(45)\n")
file.write("    fd(h)\n")
file.write("    rt(45)\n")
file.write("    fd(3)\n")
file.write("\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("    penup()\n")
file.write("    fd(10)\n")
file.write("    lt(90)\n")
file.write("    fd(10)\n")
file.write("    lt(90)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#lower right diagonal\n")
file.write("def stroke9(w):\n")
file.write("    penup()\n")
file.write("    fd(w+10)\n")
file.write("    lt(90)\n")
file.write("    fd(10)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("    begin_fill()\n")
file.write("\n")
file.write("    fd(7)\n")
file.write("    lt(45)\n")
file.write("    h = math.sqrt(((w/4)**2)+((w/3)**2))\n")
file.write("    fd(h)\n")
file.write("    lt(45)\n")
file.write("    fd(3)\n")
file.write("    lt(90)\n")
file.write("    fd(7)\n")
file.write("    lt(45)\n")
file.write("    fd(h)\n")
file.write("    lt(45)\n")
file.write("    fd(3)\n")
file.write("\n")
file.write("    end_fill()\n")
file.write("\n")
file.write("    penup()\n")
file.write("    rt(90)\n")
file.write("    fd(10)\n")
file.write("    rt(90)\n")
file.write("    fd(w+10)\n")
file.write("    lt(180)\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#this is a function that would write all fourteen segments, but i don't have a portion of the elif loop set up for it, so it's basically uselss\n")
file.write("def allfourteen(w):\n")
file.write("\n")
file.write("    bottomstroke(w)\n")
file.write("    leftstroke(w)\n")
file.write("    rightstroke(w)\n")
file.write("    topstroke(w)\n")
file.write("    stroke4(w)\n")
file.write("    stroke8(w)\n")
file.write("    midleft(w)\n")
file.write("    midright(w)\n")
file.write("    stroke3(w)\n")
file.write("    stroke5(w)\n")
file.write("    stroke9(w)\n")
file.write("    stroke7(w)\n")
file.write("\n")
file.write("#function to move turtle to next char\n")
file.write("def move(w):\n")
file.write("    penup()\n")
file.write("    fd(w+40) #just forward movement, nothing flashy\n")
file.write("    pendown()\n")
file.write("\n")
file.write("#function to move to new line\n")
file.write("def movey(w, count):\n")
file.write("    penup()\n")
file.write("    backward((w+40)*(count)) #moves the turtle back as far as it's come using the count of characters up to a space\n")
file.write("    rt(90)\n")
file.write("    fd(w+45)#moves it down to start a new line\n")
file.write("    lt(90)\n")
file.write("    pendown()\n")
           
#closing the file
file.close()

#just a comfort statement, totally unecessary
#print("Functions written to disk")

#main funky function
def main():
    #input prompt for width
    w = int(input("Please enter the width you want your characters (suggested input=20): "))
    #input a nice message (or not nice. I don't mind)
    message = input("Please enter the message you'd like written in these lovely characters that I have slaved over and I sincerely hope function properly: ")

    #some set up of speed and color
    speed("fastest")
    color("red")

    #starting coordinates to the upper left for fun
    x = -300
    y = 130

    #movement to those cordinates
    penup()
    goto(x,y)
    pendown()

    #importing the file i just wrote
    import fourteenseg

    #count for 
    count = 0

    #for loop to set up writting of entire message, all changed to uppercase,
    #because it made sense
    for let in message.upper():
        if let == "A": #all the functions, lined up in rows
            fourteenseg.A(w) #calling up functions from imported file
            fourteenseg.move(w) #moving after each character
            count += 1 #counting character for purpose of moving to new line
        elif let == "B":
            fourteenseg.B(w)
            fourteenseg.move(w)
            count += 1
        elif let == "C":
            fourteenseg.C(w)
            fourteenseg.move(w)
            count += 1
        elif let == "D":
            fourteenseg.D(w)
            fourteenseg.move(w)
            count += 1
        elif let == "E":
            fourteenseg.E(w)
            fourteenseg.move(w)
            count += 1
        elif let == "F":
            fourteenseg.F(w)
            fourteenseg.move(w)
            count += 1
        elif let == "G":
            fourteenseg.G(w)
            fourteenseg.move(w)
            count += 1
        elif let == "H":
            fourteenseg.H(w)
            fourteenseg.move(w)
            count += 1
        elif let == "I":
            fourteenseg.I(w)
            fourteenseg.move(w)
            count += 1
        elif let == "J":
            fourteenseg.J(w)
            fourteenseg.move(w)
            count += 1
        elif let == "K":
            fourteenseg.K(w)
            fourteenseg.move(w)
            count += 1
        elif let == "L":
            fourteenseg.L(w)
            fourteenseg.move(w)
            count += 1
        elif let == "M":
            fourteenseg.M(w)
            fourteenseg.move(w)
            count += 1
        elif let == "N":
            fourteenseg.N(w)
            fourteenseg.move(w)
            count += 1
        elif let == "O":
            fourteenseg.O(w)
            fourteenseg.move(w)
            count += 1
        elif let == "P":
            fourteenseg.P(w)
            fourteenseg.move(w)
            count += 1
        elif let == "Q":
            fourteenseg.Q(w)
            fourteenseg.move(w)
            count += 1
        elif let == "R":
            fourteenseg.R(w)
            fourteenseg.move(w)
            count += 1
        elif let == "S":
            fourteenseg.S(w)
            fourteenseg.move(w)
            count += 1
        elif let == "T":
            fourteenseg.T(w)
            fourteenseg.move(w)
            count += 1
        elif let == "U":
            fourteenseg.U(w)
            fourteenseg.move(w)
            count += 1
        elif let == "V":
            fourteenseg.V(w)
            fourteenseg.move(w)
            count += 1
        elif let == "W":
            fourteenseg.W(w)
            fourteenseg.move(w)
            count += 1
        elif let == "X":
            fourteenseg.X(w)
            fourteenseg.move(w)
            count += 1
        elif let == "Y":
            fourteenseg.Y(w)
            fourteenseg.move(w)
            count += 1
        elif let == "Z":
            fourteenseg.Z(w)
            fourteenseg.move(w)
            count += 1
        elif let == "0":
            fourteenseg.zero(w)
            fourteenseg.move(w)
            count += 1
        elif let == "1":
            fourteenseg.one(w)
            fourteenseg.move(w)
            count += 1
        elif let == "2":
            fourteenseg.two(w)
            fourteenseg.move(w)
            count += 1
        elif let == "3":
            fourteenseg.three(w)
            fourteenseg.move(w)
            count += 1
        elif let == "4":
            fourteenseg.four(w)
            fourteenseg.move(w)
            count += 1
        elif let == "5":
            fourteenseg.five(w)
            fourteenseg.move(w)
            count += 1
        elif let == "6":
            fourteenseg.six(w)
            fourteenseg.move(w)
            count += 1
        elif let == "7":
            fourteenseg.seven(w)
            fourteenseg.move(w)
            count += 1
        elif let == "8":
            fourteenseg.eight(w)
            fourteenseg.move(w)
            count += 1
        elif let == "9":
            fourteenseg.nine(w)
            fourteenseg.move(w)
            count += 1
        elif let == " ":
            fourteenseg.movey(w, count)
            count = 0 #resets character count every time there's a space, so it can be used to move to a new line

    #movement to those cordinates
    penup()
    goto(x,y)
    pendown()
    
    #allfourteen(w)

main()
